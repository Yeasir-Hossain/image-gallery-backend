#!/usr/bin/env node

const fs = require('node:fs');
const path = require('node:path');

function help() {
  console.log(`
  Usage:
    nginx [options]

    You have to be in sudoers group to use this

    Options:
      domain        Domain name to expose
      target        Target hostname to expose to domain
      certificate   Certificate Location
      privatekey    Private key Location

    Example:
      nginx example.com https://127.0.0:3000 /etc/nginx/cert.crt /etc/nginx/key.pem
  `);
}

function main() {
  if (!process.env.SUDO_UID) return console.error('You must be a root user to run this script');
  let args = process.argv;
  if (args.length < 6) return help();
  args = args.slice(2, 6);
  const keys = ['domain', 'target', 'certificate', 'privateKey'];
  args = args.reduce((a, v, i) => ({ ...a, [keys[i]]: v }), {});
  const { domain, target, certificate, privateKey } = args;

  const template = `
# This is an autogenerated template
# Modify at your own risk
# Author: Rakibul Yeasin <ryeasin03@gmail.com>
# Github: https://github.com/dreygur

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

upstream websocket {
	server ${domain};
}

server {
  listen 443 ssl;
  listen [::]:443 ssl;

  ssl_certificate ${certificate};
  ssl_certificate_key ${privateKey};

  server_name www.${domain};

  return 301 ${domain}$request_uri;
}

server {
  listen 80;
  listen [::]:80;

  server_name www.${domain};

  return 301 https://${domain}$request_uri;
}

server {
  listen 80;
  listen [::]:80;

  ssl_certificate ${certificate};
  ssl_certificate_key ${privateKey};

	server_name ${domain};

	return 301 https://${domain}$request_uri;
}


server {
  listen 443 ssl;
	listen [::]:443 ssl;

	ssl_certificate ${certificate};
  ssl_certificate_key ${privateKey};

	access_log /var/log/nginx/access_log_${domain};
	error_log  /var/log/nginx/error_log_${domain};

	keepalive_timeout 60;

	server_name ${domain};

  location / {
    proxy_pass ${target};
	}

  location /api {
    limit_req zone=mylimit burst=20 nodelay;
    limit_req_status 444;

    proxy_pass ${target}/api;
	}

	location /peerserver/peerjs {
  proxy_pass ${target};
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
  }
}
`;

  try {
    fs.writeFileSync(path.join(`/etc/nginx/sites-available/${domain}`), template);
  } catch (e) {
    /* eslint-disable */
    switch (e.code) {
      case 'ENOENT':
        console.error('Couldn\'t write site configuration file. NGINX is not available');
        return;
      default:
        console.error('Unknow error');
    }
    /* eslint-enable */
  }
}

(() => main())();